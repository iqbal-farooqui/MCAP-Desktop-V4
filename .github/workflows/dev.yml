name: Dev Builder
on:
  push:
    branches:
      - dev
  workflow_dispatch:

permissions:
  id-token: write
  contents: write

jobs:
  release:
    environment: DEV
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            rust_target: x86_64-unknown-linux-gnu
          - os: macos-latest
            rust_target: x86_64-apple-darwin
          - os: macos-latest
            rust_target: aarch64-apple-darwin
          - os: windows-latest
            rust_target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # for projects that use labels and PRs,
      # try https://github.com/mikepenz/release-changelog-builder-action instead
      # TODO: use API to collect commit messages
      - name: Build Changelog
        id: build_changelog
        run: echo "changelog=- ADD CHANGELOG" >> $GITHUB_OUTPUT

      - name: Get version from tauri.conf.json
        id: get_version
        uses: notiz-dev/github-action-json-property@v0.2.0
        with:
          path: "src-tauri/tauri.conf.json"
          prop_path: "package.version"

      - name: Print version
        run: echo "The version is ${{ steps.get_version.outputs.prop }}"

      - name: Node.js setup
        uses: actions/setup-node@v3
        # NOTE: enterprise developers may hard code a version
        with:
          node-version: latest
          # node-version-file: '.nvmrc'

      - name: Install Rust (Stable)
        run: curl https://sh.rustup.rs -sSf | sh -s -- -y

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

      - name: Install app dependencies from lockfile and build web
        # NOTE: comment out && yarn build if frontend does not have build script
        run: npm install && npm run build

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          # tauri-action replaces \_\_VERSION\_\_ with the app version
          tagName: d${{ steps.get_version.outputs.prop }}
          releaseName: "[Dev] MCAP-Desktop ${{ steps.get_version.outputs.prop }}"
          releaseBody: |
            ${{steps.build_changelog.outputs.changelog}}
            See the assets to download this version and install.
          releaseDraft: true
          prerelease: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::520516372695:role/github-actions-role
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload artifacts to S3 (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          aws s3 sync ./src-tauri/target/release/bundle/deb/ s3://${{ secrets.BUCKET_NAME }}/${{ steps.get_version.outputs.prop }} --exclude '*' --include '*.deb'
          aws s3 sync ./src-tauri/target/release/bundle/appimage/ s3://${{ secrets.BUCKET_NAME }}/${{ steps.get_version.outputs.prop }} --exclude '*' --include '*.AppImage' --include '*.AppImage.tar.gz' --include '*.AppImage.tar.gz.sig'

      - name: Upload artifacts to S3 (macos only)
        if: matrix.platform == 'macos-latest'
        run: |
          aws s3 sync ./src-tauri/target/release/bundle/dmg/ s3://${{ secrets.BUCKET_NAME }}/${{ steps.get_version.outputs.prop }} --exclude '*' --include '*.dmg'
          aws s3 sync ./src-tauri/target/release/bundle/macos/ s3://${{ secrets.BUCKET_NAME }}/${{ steps.get_version.outputs.prop }} --exclude '*' --include '*.app' --include '*.app.tar.gz' --include '*.app.tar.gz.sig'

      - name: Upload artifacts to S3 (windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          aws s3 sync ./src-tauri/target/release/bundle/msi/ s3://${{ secrets.BUCKET_NAME }}/${{ steps.get_version.outputs.prop }} --exclude '*' --include '*.msi' --include '*.msi.zip' --include '*.msi.zip.sig'
